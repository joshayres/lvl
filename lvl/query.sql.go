// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package lvl

import (
	"context"
)

const createHabit = `-- name: CreateHabit :one
INSERT INTO habits (
	name, level, exp
) VALUES (
	?, ?, ?
)
RETURNING id, name, level, exp
`

type CreateHabitParams struct {
	Name  string
	Level int64
	Exp   int64
}

func (q *Queries) CreateHabit(ctx context.Context, arg CreateHabitParams) (Habit, error) {
	row := q.db.QueryRowContext(ctx, createHabit, arg.Name, arg.Level, arg.Exp)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Level,
		&i.Exp,
	)
	return i, err
}

const createHabitLog = `-- name: CreateHabitLog :one
INSERT INTO habitlogs (
	habit_id, log_date
) VALUES (
	?, ?
)
RETURNING id, habit_id, log_date
`

type CreateHabitLogParams struct {
	HabitID int64
	LogDate int64
}

func (q *Queries) CreateHabitLog(ctx context.Context, arg CreateHabitLogParams) (Habitlog, error) {
	row := q.db.QueryRowContext(ctx, createHabitLog, arg.HabitID, arg.LogDate)
	var i Habitlog
	err := row.Scan(&i.ID, &i.HabitID, &i.LogDate)
	return i, err
}

const deleteHabit = `-- name: DeleteHabit :exec
DELETE FROM habits
WHERE id = ?
`

func (q *Queries) DeleteHabit(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteHabit, id)
	return err
}

const getHabit = `-- name: GetHabit :one
SELECT id, name, level, exp FROM habits
WHERE id = ? LIMIT 1
`

func (q *Queries) GetHabit(ctx context.Context, id int64) (Habit, error) {
	row := q.db.QueryRowContext(ctx, getHabit, id)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Level,
		&i.Exp,
	)
	return i, err
}

const getHabitLog = `-- name: GetHabitLog :one
SELECT id, habit_id, log_date FROM habitlogs
WHERE id = ? LIMIT 1
`

func (q *Queries) GetHabitLog(ctx context.Context, id int64) (Habitlog, error) {
	row := q.db.QueryRowContext(ctx, getHabitLog, id)
	var i Habitlog
	err := row.Scan(&i.ID, &i.HabitID, &i.LogDate)
	return i, err
}

const getHabitLogsForHabit = `-- name: GetHabitLogsForHabit :many
SELECT
	id,
	log_date
FROM
	habitlogs
WHERE
	habit_id = ?
`

type GetHabitLogsForHabitRow struct {
	ID      int64
	LogDate int64
}

func (q *Queries) GetHabitLogsForHabit(ctx context.Context, habitID int64) ([]GetHabitLogsForHabitRow, error) {
	rows, err := q.db.QueryContext(ctx, getHabitLogsForHabit, habitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHabitLogsForHabitRow
	for rows.Next() {
		var i GetHabitLogsForHabitRow
		if err := rows.Scan(&i.ID, &i.LogDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHabitLogsForHabitWithHabit = `-- name: GetHabitLogsForHabitWithHabit :many
SELECT
	hl.id,
	hl.log_date,
	hl.habit_id,
	h.name,
	h.level,
	h.exp
FROM
	habitlogs AS hl
JOIN
	habits AS h ON hl.habit_id = h.id
WHERE
	hl.habit_id = ?
`

type GetHabitLogsForHabitWithHabitRow struct {
	ID      int64
	LogDate int64
	HabitID int64
	Name    string
	Level   int64
	Exp     int64
}

func (q *Queries) GetHabitLogsForHabitWithHabit(ctx context.Context, habitID int64) ([]GetHabitLogsForHabitWithHabitRow, error) {
	rows, err := q.db.QueryContext(ctx, getHabitLogsForHabitWithHabit, habitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHabitLogsForHabitWithHabitRow
	for rows.Next() {
		var i GetHabitLogsForHabitWithHabitRow
		if err := rows.Scan(
			&i.ID,
			&i.LogDate,
			&i.HabitID,
			&i.Name,
			&i.Level,
			&i.Exp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHabitLogsForHabitWithinLastThreeDays = `-- name: GetHabitLogsForHabitWithinLastThreeDays :many
SELECT
	id,
	log_date
FROM
	habitlogs
WHERE
	habit_id = ? AND log_date >= DATE('now', '-3 days')
`

type GetHabitLogsForHabitWithinLastThreeDaysRow struct {
	ID      int64
	LogDate int64
}

func (q *Queries) GetHabitLogsForHabitWithinLastThreeDays(ctx context.Context, habitID int64) ([]GetHabitLogsForHabitWithinLastThreeDaysRow, error) {
	rows, err := q.db.QueryContext(ctx, getHabitLogsForHabitWithinLastThreeDays, habitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHabitLogsForHabitWithinLastThreeDaysRow
	for rows.Next() {
		var i GetHabitLogsForHabitWithinLastThreeDaysRow
		if err := rows.Scan(&i.ID, &i.LogDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHabitLogsWithHabit = `-- name: GetHabitLogsWithHabit :many
SELECT
	hl.id,
	hl.log_date,
	hl.habit_id,
	h.name,
	h.level,
	h.exp
FROM
	habitlogs AS hl
JOIN
	habits AS h ON hl.habit_id = h.id
`

type GetHabitLogsWithHabitRow struct {
	ID      int64
	LogDate int64
	HabitID int64
	Name    string
	Level   int64
	Exp     int64
}

func (q *Queries) GetHabitLogsWithHabit(ctx context.Context) ([]GetHabitLogsWithHabitRow, error) {
	rows, err := q.db.QueryContext(ctx, getHabitLogsWithHabit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHabitLogsWithHabitRow
	for rows.Next() {
		var i GetHabitLogsWithHabitRow
		if err := rows.Scan(
			&i.ID,
			&i.LogDate,
			&i.HabitID,
			&i.Name,
			&i.Level,
			&i.Exp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHabits = `-- name: GetHabits :many
SELECT id, name, level, exp FROM habits
ORDER BY name
`

func (q *Queries) GetHabits(ctx context.Context) ([]Habit, error) {
	rows, err := q.db.QueryContext(ctx, getHabits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Habit
	for rows.Next() {
		var i Habit
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Level,
			&i.Exp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHabit = `-- name: UpdateHabit :one
UPDATE habits
set level = ?,
exp = ?
WHERE id = ?
RETURNING id, name, level, exp
`

type UpdateHabitParams struct {
	Level int64
	Exp   int64
	ID    int64
}

func (q *Queries) UpdateHabit(ctx context.Context, arg UpdateHabitParams) (Habit, error) {
	row := q.db.QueryRowContext(ctx, updateHabit, arg.Level, arg.Exp, arg.ID)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Level,
		&i.Exp,
	)
	return i, err
}
